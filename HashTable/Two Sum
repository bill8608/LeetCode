/*
Given an array of integers, return indices of the two numbers such that they add up to a specific target.

You may assume that each input would have exactly one solution.

Example:
Given nums = [2, 7, 11, 15], target = 9,

Because nums[0] + nums[1] = 2 + 7 = 9,
return [0, 1].
UPDATE (2016/2/13):
The return format had been changed to zero-based indices. Please read the above updated description carefully.

Subscribe to see which companies asked this question

Hide Tags Array Hash Table
Show Similar Problems
*/

// Note: Here we use HashMap insted of HashSet. 
//Hashset is not working because it can not recorder the first apperance's location. 

public class Solution {
    public int[] twoSum(int[] nums, int target) {
        if(nums == null || nums.length == 0) {
            return null;
        }
        int [] res = new int [2];
        Map <Integer, Integer> map = new HashMap<>();
        //int j = 0;
        for (int i = 0; i < nums.length; i++) {
            if (map.containsKey(nums[i])) {
                res[0] = map.get(nums[i]);
                res[1] = i;
                break;
            } else {
                map.put(target - nums[i],i);
                continue;
            }
        }
        return res;
    }
}
