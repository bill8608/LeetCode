/*
Given an integer array of size n, find all elements that appear more than ⌊ n/3 ⌋ times. The algorithm should run in linear time and in O(1) space.
*/

/* Note
1.
Put "List<Integer> res = new ArrayList<Integer>()" globally instead just in one line before the assigning;
But in List<List<Integer>>, we need to put List<Integer> just in one line before the line assigning.
2.
Do not forget to check whether the List1 has contains the value: Use List1.contains() to check before assigning.
3.
if you declare and initialize a List typle variable using List<Integer> res = new ArrayList<>();
it will be [], meaning empty but the [].size() is available.
But if it is null, null.size() is wrong which will has 
"NullPointerExpection" Error pop out.
*/
public class Solution {
    public List<Integer> majorityElement(int[] nums) {
        // Wrong!!!!!!!!!!!!!!
        //Initialize res to null for the case 0 < nums.length < 4
        // and all elements are distinct. Also we can use "res ?= null"
        // as a judge condition.
        // Right!!!!!!!!!!!!!
        // initialize globally still but use list.size() ?= 0 to judge instead of list ?= null
        List<Integer> res = res = new ArrayList<>();
        HashMap<Integer, Integer> map = new HashMap<>();
        if (nums == null || nums.length == 0) {
            // if you declare and initialize a List typle variable
            // it will be [], meaning empty but the [].size() is available.
            // But if it is null, null.size() is wrong which will has 
            // "NullPointerExpection" Error pop out. 
            res = new ArrayList<>();
            return res;
        } 
        for (int i = 0; i < nums.length; i++) {
            if (map.containsKey(nums[i])) {
                int count = map.get(nums[i]);
                map.put(nums[i], ++count);
                if (count > nums.length/3) {
                    //res = new ArrayList<>();
                    ////not right, in each cycle, it will be initialized and the previous saved value will be flushed. 
                    if (!res.contains(nums[i])) {
                        res.add(nums[i]);
                    }
                }
            }
            if (!map.containsKey(nums[i])) {
                map.put(nums[i], 1);
            }
        }
        if (res.size() == 0 && nums.length >0 && nums.length < 3) {
            for (int i = 0; i < nums.length; i++) {
                //res = new ArrayList<>(nums.length);
                if (!res.contains(nums[i])) {
                    res.add(nums[i]);
                }
            }
        }
        return res;
    }
}
