/*
Count the number of prime numbers less than a non-negative number, n.
*/

//Solution 1:
/*
if n = 16;
start from 2: 2*2 = 4 and 4, 6, 8, 10, 12, 14 
Then 3: 3*3 = 9 and 9, 12, 15
Then 4: 4*4 != 16 Stop
All numbers except the above are prime numbers
*/
public class Solution {
    public int countPrimes(int n) {
        boolean [] isPrime = new boolean [n];
        for (int i = 2; i < n; i++) {
            isPrime[i] = true;
        }
        for (int i = 2; i * i < n; i++) {
            if (!isPrime[i]) {
                continue;
            }
            for (int j = i*i; j < n; j = j + i) {
                isPrime[j] = false;
            }
        }
        int count = 0;
        for (int i = 2; i < n; i++) {
            if (isPrime[i]) {
                count++;
            }
        }
        return count;
    }
}

// Solution of my own: Time exceeded
public class Solution {
    public int countPrimes(int n) {
        int count = 1;
        HashMap <Integer, Integer> map = new HashMap <> ();
        if (n <= 2) {
            return 0;
        } else if (n == 3) {
            map.put(2,1);
        } else {
            for (int i = 3; i < n; i++) {
                int j = 2;
                while (j < i) {
                    if (i % j == 0) {
                        break;
                    } else if (j+1 == i){
                        count++;
                        map.put(i,map.get(i) == null?1:map.get();)
                    }
                    j++;
                }
            }
        }
        return map.get(); 
    }
}
