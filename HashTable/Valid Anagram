/*
Given two strings s and t, write a function to determine if t is an anagram of s.

For example,
s = "anagram", t = "nagaram", return true.
s = "rat", t = "car", return false.

Note:
You may assume the string contains only lowercase alphabets.

Follow up:
What if the inputs contain unicode characters? How would you adapt your solution to such case?
*/
// Solution 1: basic ASCII as input
public class Solution {
    public boolean isAnagram(String s, String t) {
        if(s == null || t == null || s.length() != t.length()) {
            return false;
        }
        char[] str_s = s.toCharArray();
        char[] str_t = t.toCharArray();
        int[] mask = new int[256];
        for(char c : str_s) {
            mask[c]++;
        }
        for(char c : str_t) {
            if(mask[c] > 0) {
                mask[c]--;
            } else {
                return false;
            }
        }
        return true;
    }
}

// Solution 2: Unicode characters as input
public class Solution {
  public boolean isAnagram (String s, String t) {
      if (s == null || t == null || s.length() != t.length()) {
          return false;
      }
      char [] str_s = s.toCharArray();
      char [] str_t = t.toCharArray();
      Arrays.sort(str_s);
      Arrays.sort(str_t);
      if(new String(str_s).equals(new String(str_t))) {
          return true;
      }
      return false;
  }
}
