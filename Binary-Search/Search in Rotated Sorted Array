/*
Suppose a sorted array is rotated at some pivot unknown to you beforehand.

(i.e., 0 1 2 4 5 6 7 might become 4 5 6 7 0 1 2).

You are given a target value to search. If found in the array return its index, otherwise return -1.

You may assume no duplicate exists in the array.

Subscribe to see which companies asked this question

Hide Tags Binary Search Array
Show Similar Problems
*/
/*
	Solution:
	分三种情况：
	1.   顺序排列，没有rotated，1 2 3 4 5 6 7 判断start target 和mid的大小
	2.	 rotated了，旋转的数比旋转之后的数多，也就是mid在rotated的数之中 
		 [4,5,6,7,0,1,2]   
		 rotated了，但是旋转的数比正常的少，mid在正常数之中
		 [5,6,7,0,1,2,3]   判断 mid  target 和 end 的大小
		 注意2中的2中状况可以直接一次判断和else 筛选出来
*/

public class Solution {
    public int search(int[] nums, int target) {
        if (nums == null || nums.length == 0) {
            return -1;
        }
        int start = 0, end = nums.length - 1;
        while (start + 1 < end) {
            int mid = (start + end) / 2;
            
            // Stop statement
            if (nums[mid] == target) {
                return mid;
            }
            if (nums[start] < nums[mid]) {
                if (nums[start] <= target && target < nums[mid]) {
                    end = mid - 1;
                } else {
                    start = mid + 1;
                }
            } else {
            // Rotated: the nums[mid] should compare with nums[end] because the 2nd half are continuous either [7 6 5 4 3 1 2] or  [7 6 1 2 3 4 5] 
                if (nums[mid] < target && target <= nums[end]) {
                    start = mid + 1;
                } else {
                    end = mid - 1;
                }
            }
        }
        if (nums[start] == target) {
            return start;
        }
        if (nums[end] == target) {
            return end;
        }
        return -1;
    }
}
