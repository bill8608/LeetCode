/*
Suppose a sorted array is rotated at some pivot unknown to you beforehand.

(i.e., 0 1 2 4 5 6 7 might become 4 5 6 7 0 1 2).

Find the minimum element.

You may assume no duplicate exists in the array.
*/

/* Note:
        // we can use binary search: There are several reasons:
        //1. if nums[mid] > nums[end], that means more numbers are reversed than those stay, and so the minimum value should be left part:
        // start = mid;
        // 2. if nums[mid] < nums[end], that means less numbers are reversed then shose stay, and so the minimum valus should be right part:
        //end = mid;
*/

public class Solution {
    public int findMin(int[] nums) {
        int start = 0;
        int end = nums.length - 1;
        while (start + 1 < end) {
            int mid = start + (end - start) / 2;
            if (nums[mid] > nums[end]) {
                start = mid;
            } else {
                end = mid;
            }
        }
        return nums[start] > nums[end] ? nums[end]:nums[start];
    }
}
