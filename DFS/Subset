/*
Given a set of distinct integers, nums, return all possible subsets.

Note:
Elements in a subset must be in non-descending order.
The solution set must not contain duplicate subsets.
For example,
If nums = [1,2,3], a solution is:

[
  [3],
  [1],
  [2],
  [1,2,3],
  [1,3],
  [2,3],
  [1,2],
  []
]
Subscribe to see which companies asked this question

Hide Tags Array Backtracking Bit Manipulation
Show Similar Problems
*/

//Solution 1: from LeetCode 
public class Solution {
    public List<List<Integer>> subsets(int[] nums) {
        List<List<Integer>> res = new ArrayList<>();
        if (nums == null || nums.length == 0) {
            return res;
        }
        List<Integer> item = new ArrayList<Integer> ();
        Arrays.sort(nums);
        dfs(res, item, nums, 0);
        res.add(new ArrayList<Integer>()); // add the empty subset
        return res;
    }
    
    public void dfs (List<List<Integer>> res, List<Integer> item, int [] nums, int pos) {
        for (int i = pos; i < nums.length; i++) {
            item.add(nums[i]);
            res.add(new ArrayList<Integer>(item));
            dfs(res, item, nums, i + 1);
            item.remove(item.size() - 1);
        }
    }
}
