/*
Given an array nums containing n + 1 integers where each integer is between 1 and n (inclusive), prove that at least one duplicate number must exist. Assume that there is only one duplicate number, find the duplicate one.

Note:
You must not modify the array (assume the array is read only).
You must use only constant, O(1) extra space.
Your runtime complexity should be less than O(n2).
There is only one duplicate number in the array, but it could be repeated more than once.
*/

/* Note
In which case we nned to use binary search: 
if the question has "First position/last postion or a range" or the given array is sorted, it tends to use binary search

The steps are as follows:
int start = 0;
int end = nums.length - 1;
while (start < end) {
  mid = start + (end - start)/2;
  '''
  if (the target is in the second half (>mid)) start = mid + 1;
  else (0< >=mid) end = mid;
}

The method 2 is Floyd's cycle finder and in the end reset to beginning to find cycle start point
The LeetCode Linked List Cycle II is linked https://leetcode.com/discuss/70708/java-time-space-solution-by-using-assume-there-are-no-cycles
The proving procedure is linkd: http://learningarsenal.info/index.php/2015/08/24/detecting-start-of-a-loop-in-singly-linked-list/
*/

public class Solution {
    //Method 1: Binary Search
    /*
    public int findDuplicate(int[] nums) {
        int len = nums.length;
        int start = 0;
        int end = len - 1;
        while (start < end) {
            int mid = start + (end - start)/2;
            if (greaterThan (nums, mid, end) > end - mid) {
                start = mid +1;
            } else {
                end = mid;
            }
        }
        return start;
    }
    
    public int greaterThan (int [] nums, int floor, int ceiling) {
        int count = 0;
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] > floor && nums[i] <= ceiling ) {
                count++;
            }
        }
        return count;
    }
    */
    
    //Method 2: Floyd's cycle
    public int findDuplicate (int[] nums) {
        int len = nums.length;
        int fast = 0;
        int slow = 0;
        int start = 0;
        while (fast < len && nums[fast] < len) {
            slow = nums[slow];
            fast = nums[nums[fast]];
            if (fast == slow) {
                start = 0;
                while (slow != start) {
                    slow = nums[slow];
                    start = nums[start];
                }
                break;
            }
        }
        return start;
    }
}
