/*
Given a string s and a dictionary of words dict, determine if s can be segmented into a space-separated sequence of one or more dictionary words.

For example, given
s = "leetcode",
dict = ["leet", "code"].

Return true because "leetcode" can be segmented as "leet code".

Subscribe to see which companies asked this question

*/

// Time Complextity is O(NL) L is the longest length of dict element and N is the length of the string
public class Solution {
    private int getMaxLength(Set<String> dict) {
        int maxLength = 0;
        for (String word : dict) {
            maxLength = Math.max(maxLength, word.length());
        }
        return maxLength;
    }
    public boolean wordBreak(String s, Set<String> dict) {
        if (s == null || s.length() == 0) {
            return false;
        }
        
        int maxLength = getMaxLength(dict);
        // canSegment[i] is whether the first i elements can be perfectly segmented.
        boolean[] canSegment = new boolean[s.length() + 1];
        
        // initialize canSegment[0] = 0
        canSegment[0] = true;
        //canSegment = OR{canSegment[j]}, j < i, j+1 ~ i is one of the strings in the dict
        for(int i = 1; i <= s.length(); i++) {
            canSegment[i] = false;
            for(int j = 1; j <= maxLength && j <= i; j++) {
                if (!canSegment[i - j]) {
                    continue;
                }
                String word = s.substring(i -j, i);
                if (dict.contains(word)) {
                    canSegment[i] = true;
                    break;
                }
            }
        }
        return canSegment[s.length()];
    }
}
