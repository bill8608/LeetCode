Minimum Path Sum
Given a m x n grid filled with non-negative numbers, find a path from top left to bottom right which minimizes the sum of all numbers along its path.

Note: You can only move either down or right at any point in time.

Subscribe to see which companies asked this question

Hide Tags Array Dynamic Programming
Show Similar Problems

// Solution 0: My own
public class Solution {
    public int minPathSum(int[][] grid) {
        if (grid == null || grid.length == 0) {
            return -1;
        }
        // dp[i][j] means the minimum path sum from grid[0][0] until grid[i][j]
        int [][] dp = new int [grid.length][grid[0].length];
        
        // intitialization dp[0][0]
        dp[0][0]= grid[0][0];
        
        // Compute dp[i][j]
        for (int i = 0; i < grid.length; i ++) {
            for (int j = 0; j < grid[0].length; j++) {
                if (i == 0 && j != 0) {
                    dp[i][j] = dp[i][j - 1] + grid[i][j];
                }
                if (j == 0 && i != 0) {
                    dp[i][j] = dp[i - 1][j] + grid[i][j];
                }
                if (i != 0 && j != 0) {
                    dp[i][j] = Math.min(dp[i-1][j],dp[i][j-1]) + grid[i][j];
                }
            }
        }
        return dp[grid.length - 1][grid[0].length - 1];
    }
}

// soulion 1:
/*public class Solution {
    public int minPathSum(int[][] grid) {
        //corner case
        if (grid == null || grid.length == 0 || grid[0].length == 0) {
            return 0;
        }
        int m = grid.length;
        int n = grid[0].length;
        int [][] res = new int [m][n];
        res[0][0] = grid[0][0];
        for (int y = 0; y < m; y++) {
            for (int x = 0; x < n; x++) {
                
                if (y == 0) { // Fill in the top row
                    if (x > 0) {
                    res [y][x] = grid [y][x] + res [y][x-1];
                    }
                }
                else if (x == 0) { // Fill in the left most column
                    res [y][x] = grid [y][x] + res [y-1][x];
                } else {// Fill other rows and columns
                        // The point is "only move either down or right"
                    res [y][x] = Math.min((grid [y][x] + res [y][x-1]), (grid [y][x] + res [y-1][x]));
                }
            }
        }
        return res [m-1][n-1];
    }
}
*/
