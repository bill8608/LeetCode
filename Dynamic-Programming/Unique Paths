Unique Paths

A robot is located at the top-left corner of a m x n grid (marked 'Start' in the diagram below).

The robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid (marked 'Finish' in the diagram below).

How many possible unique paths are there?


Above is a 3 x 7 grid. How many possible unique paths are there?

Note: m and n will be at most 100.

Subscribe to see which companies asked this question

Hide Tags Array Dynamic Programming
Show Similar Problems

// Solution 0: My own
public class Solution {
    public int uniquePaths(int m, int n) {
        if (m == 0 || n == 0) {
            return 0;
        }
        if (m == 1 || n == 1) {
            return 1;
        }
        // dp[i][j] is the path sum from (0,0) until (m, n)
        int [][] dp = new int [m][n];
        
        // intialization:
        dp[0][0] = 1;
        
        // Compute dp[i][j] including initialize the first row and the first column
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (i == 0 && j != 0) {
                    dp[i][j] = dp[i][j-1];
                }
                if (j == 0 && i != 0) {
                    dp[i][j] = dp[i-1][j];
                }
                if (i != 0 && j != 0) {
                    dp[i][j] = dp[i][j-1] + dp[i-1][j];
                }
            }
        }
        return dp[m - 1][n - 1];
    }
}

//Soution 1
/*public class Solution {
    public int uniquePaths(int m, int n) {
        long result = 1;
        for (int i = 0; i<Math.min(m-1, n-1); i++) {
            result = result * (m+n-2-i)/(i+1);  
        }
        return (int)result;
    }
}
*/
       //Solution 2
/*
public class Solution {
    public int uniquePaths(int m, int n) {
       int [][]matrix;
       matrix = new int [m][n];
       for (int y=0; y<m; y++) {
           for (int x=0; x<n; x++) {
               if (x==0 || y==0) {
                   matrix[y][x] = 1;
               }
               else {
                   matrix[y][x]=matrix[y-1][x]+matrix[y][x-1];
               }
           }
       }
       return matrix[m-1][n-1];
    }
}
*/
       
//Solution 3
/*
public class Solution {
    public int uniquePaths(int m, int n) {
       if (m <= 0 || n <= 0) {
           return 0;
       }
       int [][] matrix = new int [m][n];
       matrix[0][0] = 1;
       for (int y = 0; y < m; y++) {
           for (int x = 0; x < n; x++) {
               if (y == 0) {
                   if (x > 0) {
                       matrix [y][x] = matrix [y][x-1];
                   }
               } else if (x == 0) {
                   matrix [y][x] = matrix [y-1][x];
               }
               else {
                   matrix [y][x] = matrix [y-1][x] + matrix [y][x-1];
               }
           }
       }
        return matrix [m-1][n-1];
    }
}
*/
