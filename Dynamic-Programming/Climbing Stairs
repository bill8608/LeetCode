/*
You are climbing a stair case. It takes n steps to reach to the top.

Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?
*/

// Solution 1: DP
public class Solution {
    public int climbStairs (int n) {
        if (n < 1) {
            return 0;
        }
        // num [i] is the number of methods until i from 0
        int [] num = new int [n];
        for (int i = 0;i < n; i++) {
            if (i == 0) {
                num[i] = 1;
            } else if (i == 1) {
                num[i] = 2;
            } else {
                num[i] = num[i - 2] + num[i - 1];
            }
        }
        return num[n - 1];
    }
}

// Solution 2: Recursion (woking but Time Limit Exceeded)
public class Solution {
    public int climbStairs (int n) {
        if (n < 1) {
            return 0;
        }
        // num [i] is the number of methods until i from 0
        int current;
        //int pre;
        if (n == 1) {
            current = 1;
        } else if (n == 2) {
            current = 2;
        } else {
            current = climbStairs(n - 2) + climbStairs(n - 1);
        }
        return current;
    }
}
