376. Wiggle Subsequence  QuestionEditorial Solution  My Submissions
A sequence of numbers is called a wiggle sequence if the differences between successive numbers strictly alternate between positive and negative. The first difference (if one exists) may be either positive or negative. A sequence with fewer than two elements is trivially a wiggle sequence.

For example, [1,7,4,9,2,5] is a wiggle sequence because the differences (6,-3,5,-7,3) are alternately positive and negative. In contrast, [1,4,7,2,5] and [1,7,4,5,5] are not wiggle sequences, the first because its first two differences are positive and the second because its last difference is zero.

Given a sequence of integers, return the length of the longest subsequence that is a wiggle sequence. A subsequence is obtained by deleting some number of elements (eventually, also zero) from the original sequence, leaving the remaining elements in their original order.

Examples:
Input: [1,7,4,9,2,5]
Output: 6
The entire sequence is a wiggle sequence.

Input: [1,17,5,10,13,15,10,5,16,8]
Output: 7
There are several subsequences that achieve this length. One is [1,17,10,13,10,16,8].

Input: [1,2,3,4,5,6,7,8,9]
Output: 2
Follow up:
Can you do it in O(n) time?

Credits:
Special thanks to @agave and @StefanPochmann for adding this problem and creating all test cases.

Tags: Dynamic Programming Greedy

// dp[i]: the max wiggle subquence length
// To compute it, we need to iterate all nums[0] nums[1] ... until nums[i] which use another inner loop form j = 0 to j < i;
// Of cource, another helper tuple sign[] is needed to recorder each element's falling or rising from the nums[j] to nums[i];
// In this case, we will compare dp[0] "+" nums[i], dp[1] "+" nums[i], , ... , dp[i-1] "+" nums[i] with dp[i] in terms of sign[j] and nums[j] vs nums[i].
// Time complexity is O(n^2)

import java.util.*;
import java.lang.Math;
import java.lang.System;

public class wiggleMaxLength {
        public int wiggleMaxLength(int[] nums) {
        if (nums == null || nums.length == 0) {
            return 0;
        }
        //dp [i] means the max wiggle subsequence ending i starting from 0
        //sign[i] means the the increasing point using 1 or decreasing point using -1. the default is 0
        int [] dp = new int [nums.length + 1];
        int [] sign = new int [nums.length + 1];
        //initialization
        dp[0] = 1;
        sign[0] = 0;
        for (int i = 1; i < nums.length ; i++) {
            for ( int j = 0; j < i; j++) {
                if (sign[j] > 0 && nums[i] < nums[j]) {
                    sign[i] = -1;
                    dp[i] = Math.max(dp[j] + 1, dp[i]);
                } else  if (sign[j] < 0 && nums[i] > nums[j]) {
                    sign[i] = 1;
                    dp[i] = Math.max(dp[j] + 1, dp[i]);
                } else if (sign[j] == 0 && nums[i] != nums[j]) {
                    sign[i] = nums[i] > nums[j]? 1:-1;
                    dp[i] = dp[j] + 1;
                } else if (sign[j] == 0 && nums[i] == nums[j]) {
                    sign[i] = 0;
                    dp[i] = dp[j];
                }
                System.out.println("sign[j]");
                System.out.println("sign[" + j + "]: " +sign[j]);
                System.out.println("dp[j]");
                System.out.println("dp[" + j + "]: " +dp[j]);
                System.out.println("\n");

            }
                System.out.println("sign[i]");
                System.out.println("sign[" + i + "]: " +sign[i]);
                System.out.println("dp[i]");
                System.out.println("dp[" + i + "]: " +dp[i]);
                System.out.println("\n");
                System.out.println("\n");
                System.out.println("\n");




        }
        return dp[nums.length - 1];
    }

        public static void main(String [] args) {
                wiggleMaxLength wig = new wiggleMaxLength();
                int [] input = new int []{1, 7, 4, 9, 2, 5};
                wig.wiggleMaxLength(input);

        }
}

//Solution 2: O(n) time complextiy
// find the turning point: Using a for loop with two paramters.

// Take attention on "<" or "<=" on " while (i + 1 < nums.length && nums[i + 1] >= nums[i])" or "while (i + 1 < nums.length && nums[i + 1] <= nums[i]" instead of no "=".
// We need to find all nums[i+1] <= nums[i] if nums[i] < nums[j]. If no "=", taking 5,3,3,2,4,6 for example, it will be out of a cycle b/w 3,3 and increment counter by 1
// in 3,2, actully, it should not increment until 2,4.
// It is the same for "nums[i+1] >= nums[i] if nums[i] > nums[j]", taking 4, 8, 8, 10, 5 as example, it will have increment counter by 1 at 8, 10, but it should not until 10, 5.
class Solution {
        public int wiggleMaxLength (int [] nums) {
                if (nums == null || nums.length == 0) {
                        return 0;
                }
                int count = 0;
                for (int i = 1, j = 0; i < nums.length; j = i, i++) {
                        if(nums[i] > nums[j]) {
                                count++;
                                while (i + 1 < nums.length && nums[i + 1] > nums[i]) {
                                        i++;
                                }
                        } else if  if(nums[i] < nums[j]) {
                                count++;
                                while (i + 1 < nums.length && nums[i + 1] < nums[i]) {
                                        i++;
                                }
                        }
                }
                return count;
        }
}



