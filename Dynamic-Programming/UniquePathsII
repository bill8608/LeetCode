/*
Follow up for "Unique Paths":

Now consider if some obstacles are added to the grids. How many unique paths would there be?

An obstacle and empty space is marked as 1 and 0 respectively in the grid.

For example,
There is one obstacle in the middle of a 3x3 grid as illustrated below.

[
  [0,0,0],
  [0,1,0],
  [0,0,0]
]
The total number of unique paths is 2.

Note: m and n will be at most 100.
*/

//Note: in the if statement, use (i,j) directly instead of (i-1,j) or (i,j-1).
//Solution 1 by my own
public class Solution {
    public int uniquePathsWithObstacles (int [][] grid) {
        if (grid == null || grid.length == 0 || grid[0].length == 0) {
            return 0;
        }
        int y = grid.length;
        int x = grid[0].length;
        // pathSum[i][j] is the number of pathes from (0,0) to (i,j)
        int [][] pathSum = new int [y][x];
        // initialization
        if (grid[0][0] == 0) {
            pathSum[0][0] = 1;
        } else {
            return 0;
        }
        for (int i = 1; i < y; i++) {
            pathSum[i][0] = grid[i][0] == 1?0:pathSum[i - 1][0];
        }
        for (int j = 1; j < x; j++) {
            pathSum[0][j] = grid[0][j] == 1?0:pathSum[0][j - 1];
        }
        for (int i = 1; i < y; i++) {
            for (int j = 1; j < x; j++) {
                if(grid[i][j] == 1) {
                    pathSum[i][j] = 0;
                } else {
                    pathSum[i][j] = pathSum[i - 1][j] + pathSum[i][j - 1];
                }
            }
        }
        return pathSum[y - 1][x - 1];
    }
}
//Solution 2 by the Discuss
/*
public class Solution {
    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        int m = obstacleGrid.length;
        int n = obstacleGrid[0].length;
        int [][] s = new int [m][n]; 
        s[0][0] = obstacleGrid[0][0] == 0?1:0;
        //obstacle is in [0][0] and there is no such path
        if (s[0][0] == 0) {
            return 0;
        }
        for (int y = 0; y < m; y++) {
            for (int x = 0; x < n; x++) {
                //obstacle ('1') in [0][0] and assign the same location in s '0'
                if (obstacleGrid[y][x] == 1) {
                    s[y][x] = 0;
                } else if (y == 0) { //the top row, assign the left value to the right
                    if (x > 0) {
                        s[y][x] = s[y][x-1];
                    }
                } else if (x == 0) { //the left most column, assign the upper value to the below
                    if (y > 0) {
                        s[y][x] = s[y-1][x];
                    }
                } else { //not in the top row or left most column, add the upper and the left together
                    s[y][x] = s[y-1][x] + s[y][x-1];
                }
            }
        }
        return s[m-1][n-1];
    }
}
*/
