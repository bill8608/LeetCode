/*
Say you have an array for which the ith element is the price of a given stock on day i.
If you were only permitted to complete at most one transaction (ie, buy one and sell one share of the stock), design an algorithm to find the maximum profit.
*/

// Solution 1:
// Only need to create two variables: one for minimum buy price and the other maximum profit
public class Solution {
    public int maxProfit(int[] prices) {
        int len = prices.length;
        if (len < 2) {
            return 0;
        }
        int minBuyPrice = prices[0];
        int maxProfit = 0;
        for (int i = 0; i<len; i++) {
            if (prices[i] < minBuyPrice) {
                minBuyPrice = prices[i];
            }
            if (prices[i] - minBuyPrice > maxProfit) {
                maxProfit = prices[i] - minBuyPrice;
            }
        }
        return maxProfit;
    }
}

// Solution 2: Math Solution
public class Solution {
    public int maxProfit(int[] prices) {
      if (prices == null || prices.length < 2) {
          return 0; 
    }
    int minBuyPrice = prices[0];
    int maxProfit = 0;
    for (int i = 1; i<prices.length; i++) {
        minBuyPrice = Math.max(prices[i], minBuyPrice);
        maxProfit = Math.max(prices[i] - minBuyPrice, maxProfit);
    }
    return maxProfit;
  }
}

// Solution 3: Dynamic Programming
/* Set two parameters: one is local which save the max profit if sell today, that is the best solution until today.
                       the other is global which save the max profit so far, that is the best solution.
    Recursion is:
                local = max (local + prices[i+1] - prices[i], prices[i+1] - prices[i]);
                global = max (global, local);
    the time complexity is O(n) and only need two prameters so the space complexity is 0(1).
*/
public class Solution {
    public int maxProfit(int[] prices) {
        if (prices == null || prices.length < 2) {
            int local = 0;
            int global = 0;
            for (int i = 0; i < prices.length - 1; i++) {
                local = max (local + prices[i+1] - prices[i], prices[i+1] - prices[i]);
                global = max (global, local);
            }
        }
        return global;
    }
}
