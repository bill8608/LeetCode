/*
Given a digit string, return all possible letter combinations that the number could represent.

A mapping of digit to letters (just like on the telephone buttons) is given below.

Input:Digit string "23"
Output: ["ad", "ae", "af", "bd", "be", "bf", "cd", "ce", "cf"].
Note:
Although the above answer is in lexicographical order, your answer could be in any order you want.

Subscribe to see which companies asked this question

Hide Tags Backtracking String
*/

//Recursion
public class Solution {
    public List<String> letterCombinations(String digits) {
        ArrayList<String> res = new ArrayList<String>();
        if (digits == null || digits.length() == 0) {
            return res;
        }
        StringBuilder item = new StringBuilder();
        String keyboard [] = {"", "", "abc", "def", "ghi", "jkl", "mno", "pqrs", "tuv", "wxyz"};
        int index = 0;
        helper (digits, index, item, keyboard, res);
        return res;
    }
    private void helper(String digits, int index, StringBuilder item, String keyboard [], ArrayList<String> res) {
        if (item.length() == digits.length()) {
            res.add(item.toString());
            return;
        }
        int num = digits.charAt(index) - '0';
        for (int i = 0; i <  keyboard[num].length(); i++) {
            item.append(keyboard[num].charAt(i));
            helper (digits, index + 1, item, keyboard, res);
            item.deleteCharAt(item.length() - 1);
        }
    }
}
