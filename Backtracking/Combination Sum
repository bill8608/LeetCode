/*
Given a set of candidate numbers (C) and a target number (T), find all unique combinations in C where the candidate numbers sums to T.

The same repeated number may be chosen from C unlimited number of times.

Note:
All numbers (including target) will be positive integers.
The solution set must not contain duplicate combinations.
For example, given candidate set [2, 3, 6, 7] and target 7, 
A solution set is: 
[
  [7],
  [2, 2, 3]
]
Subscribe to see which companies asked this question

Hide Tags Array Backtracking
Show Similar Problems
*/

//Solution 0:
public class Solution {
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        List<List<Integer>> result = new ArrayList<>();
        List<Integer> element = new ArrayList<>();
        if (candidates == null || candidates.length == 0) {
            return result;
        }
        Arrays.sort(candidates);
        combinationSumHelper (result, element, candidates, target, 0);
        return result;
    }
    
    private void combinationSumHelper(List<List<Integer>> result, List<Integer> element, int[] candidates, int target, int pos) {
        if (target < 0) {
            return;
        }
        if (target == 0) {
            result.add(new ArrayList<Integer>(element));
        }
        
        for (int i = pos; i < candidates.length; i++) {
            if (candidates[i] <= target) {
                element.add(candidates[i]);
                combinationSumHelper (result, element, candidates, target - candidates[i], i);
                element.remove(element.size() - 1);
            } else {
                break;
            }
        }
    }
}

// Soluion 1: Recursion
// take more care on i in "combinationSumHelper (res, item, candidates, target - candidates[i], i)"

public class Solution {
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        List<List<Integer>> res = new ArrayList<> ();
        List<Integer> item = new  ArrayList<> ();
        if (candidates == null || candidates.length == 0) {
            return res;
        }
        Arrays.sort(candidates);
        combinationSumHelper(res, item, candidates, target, 0);
        return res;
    }
    private void combinationSumHelper(List<List<Integer>> res, List<Integer> item, int[] candidates, int target, int start) {
        if (target < 0) {
            return;
        }
        if (target == 0) {
            res.add(new ArrayList(item));
            return;
        }
        for (int i = start; i < candidates.length; i++) {
            if (i > 0 && candidates[i] == candidates[i - 1]) {
                continue;
            }
            item.add(candidates[i]);
            combinationSumHelper (res, item, candidates, target - candidates[i], i);
            item.remove (item.size() - 1);
            
        }
    }
}
