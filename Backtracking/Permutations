/*
Given a collection of distinct numbers, return all possible permutations.

For example,
[1,2,3] have the following permutations:
[1,2,3], [1,3,2], [2,1,3], [2,3,1], [3,1,2], and [3,2,1].

Subscribe to see which companies asked this question

Hide Tags Backtracking
Show Similar Problems
*/

// Note: Use the backtracking format from "Subsets"
// Recursion
public class Solution {
    public List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> res = new ArrayList<>();
        List<Integer> item = new ArrayList<>();
        if(nums == null || nums.length == 0) {
            res.add(new ArrayList(item));
            // Alternative
            //res.add(item);
            return res;
        }
        boolean visited [] = new boolean [nums.length];
        permuteHelper(res, item, nums, visited);
        return res;
    }
    private void permuteHelper (List<List<Integer>> res, List<Integer> item, int[] nums, boolean[] visited) {
        if (item.size() == nums.length) {
            res.add(new ArrayList(item));
            return;
        }
        for (int i = 0; i < nums.length; i++) {
            if (!visited[i]) {
                visited[i] = true;
                item.add(nums[i]);
                permuteHelper(res, item, nums,visited);
                item.remove(item.size() - 1);
                visited[i] = false;
            }
        }
    }
}
