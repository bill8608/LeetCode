/*
Given two integers n and k, return all possible combinations of k numbers out of 1 ... n.

For example,
If n = 4 and k = 2, a solution is:

[
  [2,4],
  [3,4],
  [2,3],
  [1,2],
  [1,3],
  [1,4],
]
Subscribe to see which companies asked this question

Hide Tags Backtracking
Show Similar Problems
*/

// Note:

            //WRONG! helper (res, item, n, k - 1, start + 1); 
            // k and n is static but start is assigned to '1' in each call since it was assigned to '1' when calling instead of 'start'
            //it will return [2,2], [3,2],[3,3], [4,2],[4,3],[4,4] except the right //outputs cause start == 1
            item.remove(item.size() - 1);
            
public class Solution {
    public List<List<Integer>> combine(int n, int k) {
        List<List<Integer>> res = new ArrayList<>();
        List<Integer> item = new ArrayList<>();
        if (n <= 0 || k <= 0 || n < k) {
            return res;
        }
        helper (res, item, n, k, 1);
        return res;
    }
    private void helper (List<List<Integer>> res, List<Integer> item, int n, int k, int start) {
        //ending condition
        if (k < 0) {
            return;
        }
        if (k == 0) {
            res.add(new ArrayList(item));
            return;
        }
        for (int i = start; i <= n; i++) {
            item.add(i);
            helper (res, item, n, k - 1, i + 1);
            //WRONG! helper (res, item, n, k - 1, start + 1); 
            // k and n is static but start is assigned to '1' in each call since it was assigned to '1' when calling instead of 'start'
            //it will return [2,2], [3,2],[3,3], [4,2],[4,3],[4,4] except the right //outputs cause start == 1
            item.remove(item.size() - 1);
        }
    }
}
