N-Queens

The n-queens puzzle is the problem of placing n queens on an n√ón chessboard such that no two queens attack each other.



Given an integer n, return all distinct solutions to the n-queens puzzle.

Each solution contains a distinct board configuration of the n-queens' placement, where 'Q' and '.' both indicate a queen and an empty space respectively.

For example,
There exist two distinct solutions to the 4-queens puzzle:

[
 [".Q..",  // Solution 1
  "...Q",
  "Q...",
  "..Q."],

 ["..Q.",  // Solution 2
  "Q...",
  "...Q",
  ".Q.."]
]
Subscribe to see which companies asked this question

Hide Tags Backtracking
Show Similar Problems

public class Solution {
    public List<String> drawChessboard(List<Integer> cols) {
        List<String> board = new ArrayList<>();
        
        for (int row = 0; row < cols.size(); row++) {
            String boardrow = "";
            for (int col = 0; col < cols.size(); col++) {
                if(col == cols.get(row)) {
                    boardrow += 'Q';
                } else {
                    boardrow += '.';
                }
            }
            board.add(boardrow);
        }
        return board;
    }
    public boolean isValid(List<Integer> cols, int col) {
        int row = cols.size();
        for(int i = 0; i < cols.size(); i++) {
            if(cols.get(i) == col) {
                return false;
            }
            
            if(row + col == i + cols.get(i)) {
                return false;
            }
            
            if(row - col == i - cols.get(i)) {
                return false;
            }
        }
        return true;
    }
    
    public void search(List<List<String>> result, List<Integer> cols, int n) {
        if(cols.size() == n) {
            result.add(drawChessboard(cols));
            return ;
        }
        
        for(int col = 0; col < n; col++) {
            if(isValid(cols, col)) {
                cols.add(col);
                search(result, cols, n);
                cols.remove(cols.size() - 1);
            }
        }
    }
    
    public List<List<String>> solveNQueens(int n) {
        List<List<String>> result = new ArrayList<>();
        if(n <= 0) {
            return result;
        }
        List<Integer> cols = new ArrayList<>();
        search(result, cols, n);
        return result;
    }
}
