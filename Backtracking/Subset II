/*
Given a collection of integers that might contain duplicates, nums, return all possible subsets.

Note:
Elements in a subset must be in non-descending order.
The solution set must not contain duplicate subsets.
For example,
If nums = [1,2,2], a solution is:

[
  [2],
  [1],
  [1,2,2],
  [2,2],
  [1,2],
  []
]
Subscribe to see which companies asked this question

Hide Tags Array Backtracking

*/

// Note: See the analysis in Subset.java
// Using recursion to implement backtracking.

//Solution 1:
public class Solution {
    public List<List<Integer>> subsetsWithDup (int[] nums) {
        List<List<Integer>> res = new ArrayList<>();
        if(nums == null || nums.length == 0) {
            return res;
        }
        List<Integer> item = new ArrayList<>();
        Arrays.sort(nums);
        helper(res, item, nums, 0);
        return res;
    }
    private void helper(ArrayList<ArrayList<Integer>> res, arrayList<Integer> item, int[] nums, int pos) {
        if (!res.contains(new ArrayList<Integer> (item))) {
            res.add(new ArrayList<Integer> (item));
        }
        
        for (int i = pos; i < nums.length; i++) {
            item.add(nums[i]);
            helper(res, item, nums, i+1);
            item.remove(item.size() - 1);
        }
    } 
}

// Solution 2: Very silimar from above. The only difference is the decision condition.
public class Solution {
    public List<List<Integer>> subsetsWithDup (int[] nums) {
        List<List<Integer>> res = new ArrayList<>();
        if(nums == null || nums.length == 0) {
            return res;
        }
        List<Integer> item = new ArrayList<>();
        Arrays.sort(nums);
        helper(res, item, nums, 0);
        return res;
    }
    private void helper(List<List<Integer>> res, List<Integer> item, int[] nums, int pos) {
        /*if (!res.contains(new ArrayList<Integer> (item))) {
            res.add(new ArrayList<Integer> (item));
        }
        */
        res.add(new ArrayList<Integer> (item));
        
        for (int i = pos; i < nums.length; i++) {
            if (i != pos && nums[i] == nums[i - 1]) {
                continue;
            }
            item.add(nums[i]);
            helper(res, item, nums, i+1);
            item.remove(item.size() - 1);
        }
    } 
}
