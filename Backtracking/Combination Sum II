/*
Given a collection of candidate numbers (C) and a target number (T), find all unique combinations in C where the candidate numbers sums to T.

Each number in C may only be used once in the combination.

Note:
All numbers (including target) will be positive integers.
The solution set must not contain duplicate combinations.
For example, given candidate set [10, 1, 2, 7, 6, 1, 5] and target 8, 
A solution set is: 
[
  [1, 7],
  [1, 2, 5],
  [2, 6],
  [1, 1, 6]
]
Subscribe to see which companies asked this question

Hide Tags Array Backtracking
Show Similar Problems
*/
// Solution: Recursion
// Modify from Combination Sum
// "if (i > start && candidates[i] == candidates[i - 1])" change from "i > 0" (Combination Sum) to "i > start" (Combination Sum II)
//"combinationSumHelper (res, item, candidates, target - candidates[i], i + 1)" change from i (Combination Sum) to i + 1 (Combination Sum II).

public class Solution {
    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
        List<List<Integer>> res = new ArrayList<> ();
        List<Integer> item = new  ArrayList<> ();
        if (candidates == null || candidates.length == 0) {
            return res;
        }
        Arrays.sort(candidates);
        combinationSumHelper(res, item, candidates, target, 0);
        return res;
    }
    private void combinationSumHelper(List<List<Integer>> res, List<Integer> item, int[] candidates, int target, int start) {
        if (target < 0) {
            return;
        }
        if (target == 0 ) {
            res.add(new ArrayList(item));
            return;
        }
        for (int i = start; i < candidates.length; i++) {
            if (i > start && candidates[i] == candidates[i - 1]) {
                continue;
            }
            item.add(candidates[i]);
            combinationSumHelper (res, item, candidates, target - candidates[i], i + 1);
            item.remove (item.size() - 1);
            
        }
    }
}
