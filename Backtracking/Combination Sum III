/*
Find all possible combinations of k numbers that add up to a number n, given that only numbers from 1 to 9 can be used and each combination should be a unique set of numbers.


Example 1:

Input: k = 3, n = 7

Output:

[[1,2,4]]

Example 2:

Input: k = 3, n = 9

Output:

[[1,2,6], [1,3,5], [2,3,4]]
Credits:
Special thanks to @mithmatt for adding this problem and creating all test cases.

Subscribe to see which companies asked this question

Hide Tags Array Backtracking
Show Similar Problems

*/

// Solution: Recursion
// Similar to Combination Sum II
// Note: The ending condition need more cares
public class Solution {
    public List<List<Integer>> combinationSum3(int k, int n) {
        List<List<Integer>> res = new ArrayList<> ();
        List<Integer> item = new  ArrayList<> ();
        if (k > 9 || n > 45 || k <=0 || n <= 0) {
            return res;
        }
        helper(res, item, k, n, 1);
        return res;
    }
    private void helper(List<List<Integer>> res, List<Integer> item, int k, int n, int start) {
        if (n < 0) {
            return;
        }
        if (k < 0) {
            return;
        }
        if (n == 0 && k == 0) {
            res.add(new ArrayList(item));
            return;
        }
        for (int i = start; i < 10; i++) {
            item.add(i);
            helper (res, item, k - 1, n - i, i + 1);
            item.remove (item.size() - 1);
            
        }
    }
}
