/*
Given a 2D board and a word, find if the word exists in the grid.

The word can be constructed from letters of sequentially adjacent cell, where "adjacent" cells are those horizontally or vertically neighboring. The same letter cell may not be used more than once.

For example,
Given board =

[
  ['A','B','C','E'],
  ['S','F','C','S'],
  ['A','D','E','E']
]
word = "ABCCED", -> returns true,
word = "SEE", -> returns true,
word = "ABCB", -> returns false.
Subscribe to see which companies asked this question

Hide Tags Array Backtracking
Show Similar Problems
*/

// Solution 1
public class Solution {
    public boolean exist(char[][] board, String word) {

        for(int i=0;i<board.length;i++){
            for(int j=0;j<board[i].length;j++){
                if(helper(board,i,j,word,0)){
                    return true;
                }
            }
        }
        return false;
    }

    private boolean helper(char[][] board, int i, int j, String word, int step){
        // Stop statement
        if(step==word.length()){
            return true;
        }
        if(i<0||i>=board.length||j<0||j>=board[i].length){
            return false;
        }
        // Check each element to see equal or not
        if((board[i][j]-word.charAt(step))!=0){
            return false;
        }
        char record=board[i][j];
        board[i][j]='1';
        // the previous char in String word is mathch and then check all the adjacent
        boolean res=helper(board,i-1,j,word,step+1)||helper(board,i,j-1,word,step+1)||helper(board,i,j+1,word,step+1)||helper(board,i+1,j,word,step+1);
        board[i][j]=record;
        return res;

    }

}

//Solution 2
public boolean exist(char[][] board, String word) {
    for (int i = 0; i < board.length; i++) {
        for (int j = 0; j < board[i].length; j++) {
            if(exist(board, i, j, word, 0)) return true;
        }
    }
    return false;
}

private boolean exist(char[][] board, int x, int y, String word, int start) {
    if(start >= word.length()) return true;
    if(x < 0 || x >= board.length || y < 0 || y >= board[0].length) return false;
    if (board[x][y] == word.charAt(start++)) {
        char c = board[x][y];
        board[x][y] = '#';
        boolean res = exist(board, x + 1, y, word, start) || exist(board, x - 1, y, word, start) ||
        exist(board, x, y + 1, word, start) || exist(board, x, y - 1, word, start);
        board[x][y] = c;
        return res;
    }
    return false;
}
