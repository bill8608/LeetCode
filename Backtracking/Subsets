/*
Given a set of distinct integers, nums, return all possible subsets.

Note:
Elements in a subset must be in non-descending order.
The solution set must not contain duplicate subsets.
For example,
If nums = [1,2,3], a solution is:

[
  [3],
  [1],
  [2],
  [1,2,3],
  [1,3],
  [2,3],
  [1,2],
  []
]
Subscribe to see which companies asked this question

Hide Tags Array Backtracking Bit Manipulation
Show Similar Problems
*/
/* Note: Tree data structure. Each node is the list consist of the whole 2-D list.
Recursion is needed to implement the tree structure.
Sample: {1, 2}
Backtracing

      {}
      /   \  
    {1}   {2}
    /
{1, 2}
*/

// Solution 0:
public class Solution {
    public List<List<Integer>> subsets(int[] nums) {
        List<List<Integer>> result = new ArrayList<>();
        List<Integer> item = new ArrayList<>();
        //result.add(new ArrayList<>(item));
        if (nums == null || nums.length == 0) {
            return result;
        }
        Arrays.sort(nums);
        subsetsHelper(result, item, nums, 0);
        return result;
    }
    
    public void subsetsHelper(List<List<Integer>> result, List<Integer> item, int[] nums, int pos) {
        if (!result.contains(item)) {
            result.add(new ArrayList<Integer>(item));
            //return ;
        }
        for (int i = pos; i < nums.length; i++)
        //Integer num : nums) 
        {
            if (!item.contains(nums[i])) {
                item.add(nums[i]);
                subsetsHelper(result, item, nums, i + 1);
                item.remove(item.size() - 1);
            }
        }
    }
}


//Solution 1: chapter 9
public class Solution {
    public List<List<Integer>> subsets(int[] nums) {
        List<List<Integer>> result = new ArrayList<>();
        if(nums == null || nums.length == 0) {
            return result;
        }
        List<Integer> list = new ArrayList<>();
        Arrays.sort(nums);
        subsetsHelper(result, list, nums, 0);
    
        return result;
    }

    private void subsetsHelper(List<List<Integer>> result, List<Integer> list, int [] nums, int pos) {
        result.add(new ArrayList<Integer>(list));
    
        for (int i = pos; i < nums.length; i++) {
            list.add(nums[i]);
            subsetsHelper(result, list, nums, i + 1);
            list.remove(list.size() - 1);
        }
    }
}
