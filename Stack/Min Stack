public class MinStack {
    List<Integer> stack;
    List<Integer> minStack;
    //int top;
    /** initialize your data structure here. */
    public MinStack() {
        this.stack = new LinkedList<>();
        this.minStack = new LinkedList<>();
    }
    
    public void push(int x) {
        this.stack.add(x);
        if (this.minStack.size() == 0) {
            this.minStack.add(x);
        } else if (x < this.minStack.get(this.minStack.size() - 1)) {
            this.minStack.add(x);
        } else {
            this.minStack.add(this.minStack.get(this.minStack.size() - 1));
        }
    }
    
    public void pop() {
        this.stack.remove(this.stack.size()-1);
        this.minStack.remove(this.minStack.size()-1);
    }
    
    public int top() {
        return this.stack.get(stack.size()-1);
        //return this.stackMin(stack.size()-1);
    }
    
    public int getMin() {
        return this.minStack.get(minStack.size()-1);
    }
}

/**
 * Your MinStack object will be instantiated and called as such:
 * MinStack obj = new MinStack();
 * obj.push(x);
 * obj.pop();
 * int param_3 = obj.top();
 * int param_4 = obj.getMin();
 */
 
 
 Unit Case:
 MinStack minStack1 = new MinStack();
 minStack1.push(-1);
 minStack1.push(2);
 minStack1.push(-3);
 minStack1.top();
 minStack1.getMin(();
 minStack1.pop();
 minStack1.top();
 minStack1.getMin();
 
