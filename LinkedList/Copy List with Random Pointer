Copy List with Random Pointer

A linked list is given such that each node contains an additional random pointer which could point to any node in the list or null.

Return a deep copy of the list.

Subscribe to see which companies asked this question

Hide Tags Hash Table Linked List
Show Similar Problems

/* Thoughts
The core is two-step processing
1. Clone the nodes
2. Clone the edges

For 1, Create a copy of each node and map the node to the copy as well as each node's next. Here we need to use LinkedList to save the result and HashMap to save the mapping.
For 2, Create each node's next and random's copyies from the maping of previous node's next and random. 

*/
/**
 * Definition for singly-linked list with a random pointer.
 * class RandomListNode {
 *     int label;
 *     RandomListNode next, random;
 *     RandomListNode(int x) { this.label = x; }
 * };
 */
 
 // Solution 0: Breadth first search
  public class Solution {
    public RandomListNode copyRandomList(RandomListNode head) {
        if (head == null) {
            return null;
        }
        
        ArrayList<RandomListNode> nodes = new ArrayList<RandomListNode>();
        HashMap<RandomListNode, RandomListNode> map = new HashMap<RandomListNode, RandomListNode>();
        
        //clone nodes
        RandomListNode copyNode = new RandomListNode(head.label);
        map.put(head, copyNode);
        nodes.add(head);
        int start = 0;
        while (start < nodes.size()) {
            RandomListNode root = nodes.get(start++);
            RandomListNode next = root.next;
            if(!map.containsKey(next) && next != null) {
                copyNode = new RandomListNode(next.label);
                nodes.add(next);
                map.put(next, copyNode);
            }
        }
        
        //clone edges
        for (RandomListNode oldNode : nodes) {
            RandomListNode newNode = map.get(oldNode);
            RandomListNode next = oldNode.next;
            newNode.next = map.get(oldNode.next);
            RandomListNode random = oldNode.random;
            newNode.random = map.get(oldNode.random);
        }
        
        return map.get(head);
    }
 }
 // Solution 1:
public class Solution {
    public RandomListNode copyRandomList(RandomListNode head) {
        if (head == null) {
            return null;
        }
        HashMap<RandomListNode, RandomListNode> map = new HashMap<RandomListNode, RandomListNode>();
        RandomListNode dummy = new RandomListNode(0);
        RandomListNode pre = dummy, newNode;
        while (head != null) {
            if(map.containsKey(head)) {
                newNode = map.get(head);
            } else {
                newNode = new RandomListNode(head.label);
                map.put(head, newNode);
            }
            pre.next = newNode;
            
            if (head.random != null) {
                if (map.containsKey(head.random)) {
                    newNode.random = map.get(head.random);
                } else {
                    newNode.random = new RandomListNode(head.random.label);
                    map.put(head.random, newNode.random);
                }
            }
            pre = newNode;
            head = head.next;
        }
        
        return dummy.next;
    }
  }
  
  // Solution 2:
  public class Solution {
    private void copyNext(RandomListNode head) {
        while (head != null) {
            RandomListNode newNode = new RandomListNode(head.label);
            newNode.random = head.random;
            newNode.next = head.next;
            head.next = newNode;
            head = head.next.next;
        }
    }
    
    public void copyRandom(RandomListNode head) {
        while(head != null) {
            if(head.next.random != null) {
                head.next.random = head.random.next;
            }
            head = head.next.next;
        }
    }
    
    public RandomListNode splitlist(RandomListNode head) {
        RandomListNode newHead = head.next;
        while(head != null) {
            RandomListNode temp = head.next;
            head.next = temp.next;
            head = head.next;
            if(temp.next != null) {
                temp.next = temp.next.next;
            }
        }
        return newHead;
    }
    public RandomListNode copyRandomList(RandomListNode head) {
        if (head == null) {
            return null;
        }
        copyNext(head);
        copyRandom(head);
        return splitlist(head);
    }
}
