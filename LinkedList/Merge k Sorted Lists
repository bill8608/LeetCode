Merge k Sorted Lists

Merge k sorted linked lists and return it as one sorted list. Analyze and describe its complexity.

Subscribe to see which companies asked this question

Hide Tags Divide and Conquer Linked List Heap
Show Similar Problems

/* Review */
// What we need is to find the minimus in k elments
// and poll the ninimum
// and the second elment in which linkedlis the mininum existcan can push

// To meet such needs, we can use PriorityQueue wchich can poll() the minimum/maxmum each time depending how we define comparator.
// As well, it can push a element to replace the poll-out element.

// For the time complexity, each time polling the minimum in k element costs log(k) and there will be (N-k) times polling the minimum
// So the time complextiy is O((N-k)log(k)), that is, O(Nlog(k)) since k is an constant and N is variable.
// For the space complexity, it is O(k) because the heap use K spcace and there is nothing else.

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
public class Solution {
    private Comparator<ListNode> ListNodeComparator = new Comparator<ListNode>() {
        public int compare(ListNode left, ListNode right) {
            if (left == null) {
                return 1;
            } else if (right == null) {
                return -1;
            }
            return left.val - right.val;
        }
    };
    
    public ListNode mergeKLists(ListNode[] lists) {
        if (lists == null || lists.length == 0) {
            return null;
        }
        
        Queue<ListNode> heap = new PriorityQueue<ListNode>(lists.length, ListNodeComparator);
        for (int i = 0; i < lists.length; i++) {
            heap.add(lists.get(i));
        }
        
        ListNode dummy = new ListNode(0);
        ListNode tail = dummy;
        while (!heap.isEmpty()) {
            ListNode head = heap.poll();
            tail.next = head;
            tail = head;
            if (head.next != null) {
                heap.add(head.next);
            }
        }
        return dummy.next;
    }
}

// Solution 2:
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
public class Solution {
    /*
    private ListNode findMiddle(ListNode head) {
        if (head == null) {
            return null;
        }
        ListNode fast = head.next, slow = head;
        while (fast != null && fast.next != null) {
            slow = slow.next;
            fast = fast.next.next;
        }
        return slow;
    }
    */
    private ListNode merge (ListNode head1, ListNode head2) {
        ListNode dummy = new ListNode(0);
        ListNode tail = dummy;
        while (head1 != null && head2 != null) {
            if(head1.val < head2.val) {
                tail.next = head1;
                head1 = head1.next;
            } else {
                tail.next = head2;
                head2 = head2.next;
            }
            tail = tail.next;
        }
        if(head1 != null) {
            tail.next = head1;
        } else {
            tail.next = head2;
        }
        return dummy.next;
    }
    
    public ListNode Sort(ListNode [] lists, int low, int high) {
        if (low < high) {
            int mid = low + (high - low) / 2;
            ListNode head1 = Sort(lists, low, mid);
            ListNode head2 = Sort(lists, mid + 1, high);
            return merge (head1, head2);
        } else {
            return lists[low];
        }
    }
    
    public ListNode mergeKLists(ListNode[] lists) {
        if(lists == null || lists.length == 0) {
            return null;
        }
        if (lists.length == 1) {
            return lists[0];
        }
        return Sort(lists, 0, lists.length - 1);
    }
}
