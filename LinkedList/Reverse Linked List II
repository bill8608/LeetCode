Reverse Linked List II

Reverse a linked list from position m to n. Do it in-place and in one-pass.

For example:
Given 1->2->3->4->5->NULL, m = 2 and n = 4,

return 1->4->3->2->5->NULL.

Note:
Given m, n satisfy the following condition:
1 ≤ m ≤ n ≤ length of list.

Subscribe to see which companies asked this question

Hide Tags Linked List
Show Similar Problems

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
public class Solution {
    public ListNode reverseBetween(ListNode head, int m, int n) {
        if (m >= n || head == null) {
            return head;
        }
        // Create a dummy node
        ListNode dummy = new ListNode(0);
        // Create a dummy node which stores the node before m
        ListNode dummyM = new ListNode(0);
        dummy.next = head;
        head = dummy;
        for (int i = 0; i < m - 1; i++) {
            if (head == null) {
                return null;
            }
            head = head.next;
        }
        ListNode preNode = head;
        ListNode mNode = head.next;
        ListNode nNode = mNode, postnNode = mNode.next;
        for (int i = m; i < n; i++) {
            if (postnNode == null) {
                return null;
            }
            ListNode temp = postnNode.next;
            postnNode.next = nNode;
            nNode = postnNode;
            postnNode = temp;
            
        }
        mNode.next = postnNode;
        preNode.next = nNode;
        
        return dummy.next;
    }
}
