Given an array of size n, find the majority element. The majority element is the element that appears more than ⌊ n/2 ⌋ times.

You may assume that the array is non-empty and the majority element always exist in the array.

Credits:
Special thanks to @ts for adding this problem and creating all test cases.

Subscribe to see which companies asked this question

Hide Tags Array Divide and Conquer Bit Manipulation
Show Similar Problems

/* Note
There is a bug in the question spec on if there will two majority elements such as [0, 0, 1, 1] in which both 0 and 1 are majority
Elements but it will return 0 only cause 0 reach the majority first.
*/
/*
public class Solution {
    public int majorityElement(int[] nums) {
        HashMap <Integer,Integer> map = new HashMap<>();
        for (int i = 0; i < nums.length; i++) {
            if (map.containsKey(nums[i])) {
                // Declare a variable to save the number of nums[i] appearance, 
                // because there will be an increment process needed and we can
                // not execute it directly on map.get(nums[i])
                int count = map.get(nums[i]);
                // Increment the HashMap if an element appears more than once
                map.put (nums[i], ++count);
                if (map.get(nums[i]) > nums.length / 2) {
                // Return the Majority Element
                    return nums[i];
                }
            }
            if (!map.containsKey(nums[i])) { 
            // Initialize the HashMap if an element appear for the first time
                map.put (nums[i], 1);
            }
        }
        return nums[0];
    }
}
*/


public class Solution {
    public int majorityElement(int[] nums) {
        int candidate = 0, count = 0;
        for (int i = 0; i < nums.length; i++) {
            if(count == 0) {
                candidate = nums[i];
                count++;
            } else {
                if (candidate == nums[i]) {
                    count++;
                } else {
                    count--;
                }
            }
        }
        return candidate;
    }
}
