/*
Follow up for "Remove Duplicates":
What if duplicates are allowed at most twice?

For example,
Given sorted array nums = [1,1,1,2,2,3],

Your function should return length = 5, with the first five elements of nums being 1, 1, 2, 2 and 3. It doesn't matter what you leave beyond the new length.
*/
//Solution 1:
public class Solution {
    public int removeDuplicates(int[] nums) {
        int i = 0;
        for (int n:nums) {
            if (i < 2 || n > nums[i-2]) {
                nums[i++] = n;
            }
        }
        return i;
    }
}

//Solution 2:
public class Solution {
    public int removeDuplicates(int[] nums) {
        if (nums == null || nums.length == 0) {
            return 0;
        }
        //save the index length which meet the requirement until now
        int index = 0;
        //save the number of duplicates
        int count = 0;
        for (int i = 0; i < nums.length; i++) {
            if (i >0 && nums[i] == nums[i-1]) {
                count++;
                if (count >= 3) {
                    continue;
                } 
            } else {
                    count = 1;
            }
            nums[index++] = nums[i];
        }
        return index;
    }
}
