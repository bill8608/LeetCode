/*
Given an array of n integers where n > 1, nums, return an array output such that output[i] is equal to the product of all the elements of nums except nums[i].

Solve it without division and in O(n).

For example, given [1,2,3,4], return [24,12,8,6].

Follow up:
Could you solve it with constant space complexity? (Note: The output array does not count as extra space for the purpose of space complexity analysis.)

Subscribe to see which companies asked this question
*/

public class Solution {
    public int[] productExceptSelf(int[] nums) {
        int [] res = new int [nums.length];
        int [] product = new int [nums.length];
        product[nums.length - 1] = 1;
        // Compute the index i's right product 
        for( int i = nums.length -2; i > -1 ; i--) {
            product[i] = nums[i+1] * product[i+1]; 
        }
        int left = 1;
        res[0] = product[0];
        for ( int i = 1; i < nums.length; i++) {
            // Compute the index i's left product 
            left = nums[i-1] * left;
            res[i] = left * product[i];
        }
        return res;
    }
}

//Optimazation for the above
public class Solution {
    public int[] productExceptSelf(int[] nums) {
        //int [] res = new int [nums.length];
        int [] product = new int [nums.length];
        product[nums.length - 1] = 1;
        // Compute the index i's right product 
        for( int i = nums.length -2; i > -1 ; i--) {
            product[i] = nums[i+1] * product[i+1]; 
        }
        int left = 1;
        //res[0] = product[0];
        for ( int i = 0; i < nums.length; i++) {
            // Compute the index i's left product 
            product[i] = left * product[i];
            left = nums[i] * left;
            
        }
        return product;
    }
}
