/*
Find all possible combinations of k numbers that add up to a number n, given that only numbers from 1 to 9 can be used and each combination should be a unique set of numbers.

Ensure that numbers within the set are sorted in ascending order.


Example 1:

Input: k = 3, n = 7

Output:

[[1,2,4]]

Example 2:

Input: k = 3, n = 9

Output:

[[1,2,6], [1,3,5], [2,3,4]]
*/

public class Solution {
    public List<List<Integer>> combinationSum3(int k, int n) {
        return helper(k n, 9);
    }
    
    private List<List<Integer>> helper(int k, int n, int end) {
        List<List<Interger>> collection = new ArryList<List<Integer>>();
        int [] sum = new int [k];
        while (true) {
            while (k > 0 && n > 0 && end > 0) {
                end = end > n ? end : n;
                sum[(k--) - 1] = end;
                n -= end--;
            }
            if (k == 0 && n == 0) {
            List<Integer> list = new ArrayList<Integer>();
            for (int i : sum) {
                list.add(i);
            }
            collection.add(list);
        }
        if (++k > sum.length) {
            break;
        }
        end = sum[k - 1];
        n += end--;
    }
    return collection;
  }
}
