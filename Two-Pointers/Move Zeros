Given an array nums, write a function to move all 0's to the end of it while maintaining the relative order of the non-zero elements.

For example, given nums = [0, 1, 0, 3, 12], after calling your function, nums should be [1, 3, 12, 0, 0].

Note:
You must do this in-place without making a copy of the array.
Minimize the total number of operations.

//Solution 1: minimum operation, swap
/* Note
This method is very tricky and both zero and l pointers will go in the same pace
until 0 is encountered. Then l pointer increments by 1 but zero pointer stays. So the zero 
points to the the 0 and the l pointer points to the following element. In next cycle, swap 
what zero and l pointers point.
After the swap, the zero and l pointers incement by 1 (zero increment by 1 in the swap actually). 
Now zero points to the swapped 0 and the l points to the next element. If what l points to is 
non-zero, swap what zero and l point again.
Repeat above until the l reach nums.length.
*/
public class Solution {
    public void moveZeroes(int[] nums) {
        if (nums == null || nums.length <= 1) {
            return;
        }
        int zero = 0, l = 0, r = nums.length;
        while (l < r) {
            if (nums[l] != 0) {
                int temp = nums[zero];
                nums[zero++] = nums[l];
                nums[l] = temp;
            }
            l++;
        }
    }
}

//Solution 2: non-swap
/* Note
No swap. Use count to recorder the amount of non-zero elements, e.g. x  
and assign them to the first x elements to the first positions of the array;
Then Assign the leftover postions with 0.
*/
public class Solution {
    public void moveZeros (int[] nums) {
        if (nums == null || nums.length <= 1) {
            return;
        }
        int count;
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] != 0) {
                nums[count++] = nums[i];
            }
        }
        while (count < nums.length) {
            nums[count++] = 0;
        }
    }
}
