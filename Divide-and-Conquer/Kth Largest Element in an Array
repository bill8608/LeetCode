Find the kth largest element in an unsorted array. Note that it is the kth largest element in the sorted order, not the kth distinct element.

For example,
Given [3,2,1,5,6,4] and k = 2, return 5.

Note: 
You may assume k is always valid, 1 ≤ k ≤ array's length.

Credits:
Special thanks to @mithmatt for adding this problem and creating all test cases.

Subscribe to see which companies asked this question

Hide Tags Heap Divide and Conquer
Show Similar Problems


Reference to:
http://www.geekviewpoint.com/java/search/quickselect

import java.util.Random;

public class Solution {
    public int findKthLargest(int[] nums, int k) {
        return quickSort(nums, 0, nums.length - 1, k - 1);
    }
    
    private int quickSort(int[] nums, int start, int end, int k1) {
        int pivot = partition (nums, start, end, k1);
        while (start <= end) {
            if (pivot == k1) {
                return nums[pivot];
            }
            if (pivot < k1) {
                return quickSort(nums,pivot + 1, end, k1);
            }
            return quickSort(nums,start, pivot - 1, k1);
        }
        return Integer.MIN_VALUE;
    }
    
    private int partition(int[] nums, int start, int end, int k1) {
        //int pivot = start + Random().nextInt(start, end - start + 1);
        //swap(nums, pivot, end);
        int pivot = end;
        for (int i = start; i < end; i++) {
            if (nums[i] > nums[end]) {
                swap(nums, i, start);
                start++;
            }
        }
        swap(nums, start, end);
        return start;
    }
    
    private void swap (int [] nums, int x, int y) {
        int temp = nums[x];
        nums[x] = nums[y];
        nums[y] = temp;
    }
}
