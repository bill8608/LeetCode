/*
Given an array of non-negative integers, you are initially positioned at the first index of the array.

Each element in the array represents your maximum jump length at that position.

Your goal is to reach the last index in the minimum number of jumps.

For example:
Given array A = [2,3,1,1,4]

The minimum number of jumps to reach the last index is 2. (Jump 1 step from index 0 to 1, then 3 steps to the last index.)

Note:
You can assume that you can always reach the last index.
*/
//Solution 1: Greedy
/*
steps: the number of jumps until now
lastCover: The largest reach after jumping at steps times from A[0]
maxCover: The largest reach from 0 to i
when lastCover < i showing steps times of jumps can not cover the current element i and so we need to add another jump to make it reach the current maxCover 
*/
public class Solution {
    public int jump (int [] nums) {
        if (nums == null || nums.length == 0) {
            return 0;
        }
        int maxCover = 0;
        int steps = 0;
        int lastCover = 0;
        for (int i = 0; i < nums.length && i <= maxCover; i++) {
            if (i > lastCover) {
                steps++;
                lastCover = maxCover;
            }
            
            if (nums[i] + i > maxCover) {
                maxCover = A[i] + i;
            }
        }
        if (maxCover < nums.length - 1) {
            return 0;
        }
        return steps;
    }
}

// Solution 2: DP
public class Solution {
	//DP 
	//steps mean the minimum step from 0 to i
    public int jump(int[] A) {
        int[] steps = new int[A.length];
        steps[0] = 0;
        for (int i = 1; i < A.length; i++) {
            steps[i] = Integer.MAX_VALUE;
            for (int j = 0; j < i; j++) {
                if (steps[i] != Integer.MAX_VALUE && A[j] + j > i) {
                    steps[i] = steps[j] + 1;
                    break;
                }
            }
        }
        return steps[A.length - 1];
    }
