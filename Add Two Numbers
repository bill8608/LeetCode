Add Two Numbers

You are given two linked lists representing two non-negative numbers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.

Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)
Output: 7 -> 0 -> 8

Hide Company Tags Amazon Microsoft Bloomberg Airbnb Adobe
Hide Tags Linked List Math
Hide Similar Problems (M) Multiply Strings (E) Add Binary (E) Sum of Two Integers

Solving thought:
In the while loop, create a new ListNode, do not use head.val to receive the sum % 10 cause it will reslut in NULLPOINTEREXCEPTION.

The thought is to connect one node by one node so the connected node have to be created first.

As well, do not forget the case like [5], [5] and another ListNode to receive the carry = 1 should be created. So add the condtion carry != 0 to the while condition.

public class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        if (l1 == null || l2 == null) {
            return l1 == null? l2:l1;
        }
        ListNode pre = new ListNode(0);
        ListNode head = pre;
        int carry = 0;
        int val1 = 0;
        int val2 = 0;
        int sum = 0;
        while (l1 != null || l2 != null || carry != 0) {
            // create a new listnode in case the current one is null
            ListNode cur = new ListNode(0);
            /*
            val1 = l1 == null ? 0:l1.val;
            val2 = l2 == null ? 0:l2.val;
            sum = (val1 + val2 + carry) % 10;
            carry = (val1 + val2 + carry) / 10;
            cur.val = sum;
            */
            sum = (val1 = l1 == null ? 0:l1.val) + (val2 = l2 == null ? 0:l2.val) + carry;
            cur.val = sum % 10;
            carry = sum / 10;
            pre.next = cur;
            pre = cur;
            l1 = l1 == null ? null : l1.next;
            l2 = l2 == null ? null : l2.next;
        }
        return head.next;
    }
}

